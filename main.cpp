#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib>
#include <igraph.h>

using namespace std;

void list_paths( vector< vector >& vpaths,
		 vector< unsigned > path,
		 unsigned vertex,
		 unsigned& start,
		 unsigned& end,
		 double T
		 ) {
  path.push_back( 0 ); //placeholder
  //for each neighbor n of vertex
  path.last_element = n ;
  //if n == end
  if (n == end) {
    //path = path \union {n}

    vpaths.push_back( path );
    return;
  } else {
    //if length( path < T )
    if (path.length() < T) {
      //continue down n
      list_paths( vpaths, path, n, start, end );
    }
  }
}
		 


void parse_input(
		 string& in_params,
		 string& fname
) {
  istringstream iss;
  iss.str( in_params );
  
  iss >> fname;
}

int main( int argc, char** argv ) {
  
  if (argc < 2) {
    cerr << "Usage: " << argv[0] << " input_file\n";
    exit(0);
  }

  string in_params;
  string fname;

  for (unsigned i = 1; i < argc; ++i) {
    if (i == 1) {
      in_params = argv[i];
    } else {
      in_params += argv[i];
    }

    in_params += " ";
  }

  cout << "Input params: " << in_params << endl;
  
  parse_input( in_params, fname );
  igraph_integer_t n;
  igraph_t G;
  
  if (fname.substr(0, 2) == "ER") {
    double p = 0.01;
    fname = fname.substr(2);
    n = stoi( fname );
    igraph_erdos_renyi_game( &G, IGRAPH_ERDOS_RENYI_GNP,
			     n, p,
			     false,    //directed
			     false );  //no self loops 
  } 
  
  
  
  return 0;
}

